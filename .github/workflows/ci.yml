name: CI (build, test, docker)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-and-docker:
    runs-on: ubuntu-latest

    steps:
      # 1) Чекаут кода
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Java 21 + кэш Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3) Сборка и тесты
      - name: Build & Test (Maven)
        run: mvn -B -DskipTests=false verify

      # 4) Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5) Сборка образа и ЗАГРУЗКА в локальный докер раннера (ключ load: true!)
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false                  # не пушим в реестр
          load: true                   # <-- ВАЖНО: загрузить образ в локальный Docker
          tags: app:test-ci            # локальный тег

      # 6) Поднять контейнер и дождаться health
      - name: Run container
        run: |
          docker run -d --name app -p 8080:8080 app:test-ci
          echo "Waiting for app to be UP..."
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "App is UP"; exit 0
            fi
            sleep 2
          done
          echo "App did not become healthy in time"; docker logs app; exit 1

      # 7) Smoke-тесты API (POST -> GET -> DELETE)
      - name: API smoke tests
        run: |
          set -e
          CREATE_RESP=$(curl -s -X POST http://localhost:8080/cards \
            -H "Content-Type: application/json" \
            -d '{"title":"From CI","description":"Smoke","status":"OPEN"}')
          echo "Create response: $CREATE_RESP"
          ID=$(echo "$CREATE_RESP" | sed -E 's/.*"id":\s*([0-9]+).*/\1/')
          echo "Created ID: $ID"
          curl -s http://localhost:8080/cards/$ID | grep -q '"title":"From CI"'
          curl -s -X DELETE http://localhost:8080/cards/$ID
          ! curl -s http://localhost:8080/cards | grep -q "\"id\":$ID"

      # 8) Показать логи при падении
      - name: Show container logs on failure
        if: failure()
        run: docker logs app || true

      # 9) Уборка
      - name: Stop container
        if: always()
        run: docker rm -f app || true
